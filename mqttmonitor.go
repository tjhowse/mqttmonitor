package mqttmonitor

import (
	"fmt"
	"io"
	"log"
	"os"
	"time"

	mqtt "github.com/eclipse/paho.mqtt.golang"
)

var f mqtt.MessageHandler = func(client mqtt.Client, msg mqtt.Message) {
	fmt.Printf("TOPIC: %s\n", msg.Topic())
	fmt.Printf("MSG: %s\n", msg.Payload())
}

// MQTTMonitor monitors mqtt... ?
type MQTTMonitor struct {
	c        mqtt.Client
	s        *Settings
	channels map[string](chan mqtt.Message)
}

type Settings struct {
	MQTT struct {
		Hostname string `yaml:"hostname"`
		Port     int    `yaml:"port"`
		Username string `yaml:"username"`
		Password string `yaml:"password"`
		ClientID string `yaml:"clientid"`
	}
}

// NewMQTTMonitor returns a pointer to an instance of MQTTMonitor
func NewMQTTMonitor(s *Settings) *MQTTMonitor {
	m := MQTTMonitor{}
	m.s = s
	mqtt.ERROR = log.New(os.Stderr, "[ERROR]", 0)
	fullPath := fmt.Sprintf("tcp://%s:%d", m.s.MQTT.Hostname, m.s.MQTT.Port)
	opts := mqtt.NewClientOptions().AddBroker(fullPath).SetClientID(m.s.MQTT.ClientID)
	opts.SetKeepAlive(2 * time.Second)
	opts.SetDefaultPublishHandler(f)
	opts.SetPingTimeout(1 * time.Second)
	opts.SetUsername(m.s.MQTT.Username)
	opts.SetPassword(m.s.MQTT.Password)
	opts.SetConnectionLostHandler(m.connectionLostHandler)
	opts.SetOnConnectHandler(m.onConnectHandler)
	opts.SetAutoReconnect(true)
	m.c = mqtt.NewClient(opts)
	if token := m.c.Connect(); token.Wait() && token.Error() != nil {
		panic(token.Error())
	}
	fmt.Println("Connected to MQTT broker")
	return &m
}

// Register a io.Writer to be used as the log destination for all log messages
// generated by the paho MQTT code.
func (m *MQTTMonitor) RegisterLogWriter(w io.Writer) {
	mqtt.ERROR = log.New(w, "[ERROR]", 0)
	mqtt.CRITICAL = log.New(w, "[CRITICAL]", 0)
	mqtt.WARN = log.New(w, "[WARN]", 0)
}

func (m *MQTTMonitor) connectionLostHandler(_ mqtt.Client, _ error) {
	mqtt.WARN.Printf("Lost contact with the MQTT broker, reconnecting")
}

// onConnectHandler subscribes to all of the topics in the channels map
// and starts feeding the results into the corresponding channels.
func (m *MQTTMonitor) onConnectHandler(_ mqtt.Client) {
	mqtt.DEBUG.Printf("Connected to broker")
	for topic := range m.channels {
		m.subscribeAndFeedChannel(topic)
	}
}

// SubscribeAndGetChannel returns a channel that will provide mqtt.Messages published
// to that topic.
func (m *MQTTMonitor) SubscribeAndGetChannel(topic string) (chan mqtt.Message, error) {
	m.channels[topic] = make(chan mqtt.Message)
	err := m.subscribeAndFeedChannel(topic)
	if err != nil {
		return nil, err
	}

	return m.channels[topic], nil
}

func (m *MQTTMonitor) subscribeAndFeedChannel(topic string) error {
	callback := func(client mqtt.Client, msg mqtt.Message) {
		m.channels[topic] <- msg
	}
	if token := m.c.Subscribe(topic, 0, callback); token.Wait() && token.Error() != nil {
		return token.Error()
		// mqtt.ERROR.Printf("failed to subscribe to %q", topic)
	}
	return nil
}

// Publish can be used to publish a message to a topic
func (m *MQTTMonitor) Publish(topic, message string) error {
	if token := m.c.Publish(topic, 1, false, message); token.Wait() && token.Error() != nil {
		return fmt.Errorf("failed to publish to %q", topic)
	}
	return nil
}
